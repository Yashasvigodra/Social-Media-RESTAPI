name: build and deploy code

on: [push, pull_request]

jobs:
  build:
    name: Run Tests
    environment:
      name: testing
    env:
      DATABASE_HOSTNAME: ${{ secrets.DATABASE_HOSTNAME }}
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTE: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTE }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE_NAME }}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: installing httpx
        run: pip install httpx

      - name: Run tests with pytest
        run: |
          pip install pytest
          pytest

#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_HUB_USERNAME }}
#          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Build and push
#        id: docker_build
#        uses: docker/build-push-action@v6
#        with:
#          context: ./
#          push: true
#          tags: ${{ secrets.DOCKER_HUB_USERNAME}}/fastapi:latest
#          cache-from: type=local,src=/temp/.buildx-cache
#          cache-to: type=local,dest=/tmp/.buildx-cache
#      - name: Image digest
#        run: echo ${{ steps.docker_build.outputs.digest }}


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ build ]
    environment:
      name: production

    steps:
      - name: pulling git repo
        uses: actions/checkout@v4
#      - name: Trigger deployment
#        uses: sws2apps/render-deployment@main #consider using pin for dependabot auto update
#        with:
#            serviceId: ${{ secrets.RENDER_SERVICE_ID }}
#            apiKey: ${{ secrets.RENDER_API_KEY }}

      - name: Deploying to ubuntu server
        uses: appleboy/ssh-action@v1
        with:
            host: ${{ secrets.PROD_HOST }}
            username: ${{ secrets.PROD_USERNAME }}
            password: ${{ secrets.PROD_PASSWORD }}

            script: |
              cd app/src
              git pull
              echo ${{ secrets.PROD_PASSWORD}} | sudo -s systemctl restart api

